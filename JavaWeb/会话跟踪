### 会话跟踪

###### Web服务器记录客户端状态的机制
1. 会话：服务器应当能够标识出来每个客户的一系列请求，并把这些请求组成一个单独的工作“会话”。通过把特定请求与一个特定的工作会话相联系，服务器就可以把一个用户与另一个用户区分开了。
2. 状态：服务器应当能够记住前面请求的信息，以及对前一请求做出的处理信息。也就是说，服务器应当给每个会话联系状态。

###### SSL会话
在建立了加密连接的过程中，客户和服务器都可以产生名叫“会话秘钥”的东西，它是一种加密和解密消息的对称秘钥。基于HTTPS协议的服务器可以使用这个客户的对称秘钥来建立会话。

###### Cookie
Cookie是一种由服务器发送给客户的片段信息，存储在客户端浏览器的内存中或硬盘上，在客户端随后对该服务器的请求中发回它。Cookies以键值对的方式记录会话跟踪的内容，服务器利用响应报头Set-Cookie来发送Cookie信息。在RFC2109中定义的Set-Cookie响应报头的格式为：
`set-Cookie: NAME=VALUE; Comment=value; Domain=value; Max-Age=Value; Path=value; Secure; Version=1*DIGIT`
NAME是Cookie的名字，VALUE是它的值。NAME=VALUE属性-值对必须首先出现，在此之前的属性-值对可以以任何顺序出现。在Servlet规范中，用于会话跟踪的Cookie的名字必须是JSESSIONID。Comment属性是可选的，因为Cookie可能包含关于用户私有的信息，这个属性允许服务器说明这个Cookie的使用，用户可以检查这个信息，然后决定是否要加入或继续会话。Domain属性是可选的，用于指定Cookie在哪一个域中有效，所指定的域必须以点号(.)开始。Max-Age属性是可选的，用于定义Cookie的生存时间，以秒为单位，如果超过了这个时间客户端应该丢弃这个Cookie，如果指定的秒数为0，表示这个Cookie应该立即被丢弃。Path属性是可选的，用于指定这个Cookie在哪一个URL子集下有效。Secure属性是可选的，它没有值，用于指定浏览器使用安全的方式与服务器交互。Version属性是必需的，它的值是一个十进制的整数，标识Cookie依照的状态管理规范的版本，对于RFC2109,Version应当设为1。
因为Cookie是在响应报头和请求报头中被传送的，不与传送的内容混淆在一起，所以Cookie的使用对用户来说是透明的。然而也正是因为Cookie对用户是透明的，加上Cookie持久性高，可以长时间的追踪用户(Cookie可以保存在用户机器的硬盘上)，了解用户上网的习惯，而用户在网上的一举一动，就有可能成为某些网站或厂商赚钱的机会，这就造成了一些隐私权和安全性方面的问题。于是有些用户在使用浏览器时，会选择禁用Cookie，这样的话，Web服务器就无法利用Cookie来跟踪用户的会话了，要解决这个问题，就要用到URL重写机制。

###### URL重写
当用户不接受Cookie的时候，可以使用URL重写的机制来跟踪用户的会话。URL重写就是在URL中嵌入标识客户的SessionID，Servlet容器解释URL，取出SessionID，根据SessionID将请求与特定的Session关联。SessionID被编译为URL字符串的路劲参数，在Servlet规范中，这个参数的名字必须是jsessionid，下面是一个包含了编码后的路劲信息的URL例子：
`http://localhost:8080/index.jsp; jseesionid=1234`
服务器将SessionID作为URL的一部分发送给客户端，客户端在请求URL中再传回来，这样，Web服务器就可以跟踪用户的会话了。